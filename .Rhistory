#完善包的基本信息
usethis::use_description(fields = list(
Title = "ZCPstates: An R Package for Daily Proteomics Analysis and Visualization",
Description = "ZCPstates is a lightweight R package designed for daily proteomics data analysis and visualization. The package provides tools for exploring proteomics data, and facilitating routine workflows for data preprocessing and result interpretation.",
License = "MIT",
Version = "0.1.0",
Imports = "dplyr, ggplot2, tidyr, purrr, patchwork, ggtext, reshape2, export", 'grid','crayon','data.table','stats','stringr','aPEAR'
))
#完善包的基本信息
usethis::use_description(fields = list(
Title = "ZCPstates: An R Package for Daily Proteomics Analysis and Visualization",
Description = "ZCPstates is a lightweight R package designed for daily proteomics data analysis and visualization. The package provides tools for exploring proteomics data, and facilitating routine workflows for data preprocessing and result interpretation.",
License = "MIT",
Version = "0.1.0",
Imports = "dplyr, ggplot2, tidyr, purrr, patchwork, ggtext, reshape2, export, grid,crayon,data.table,stats,stringr,aPEAR"
))
#定义函数
usethis::use_r("uniprotEnrich")
load("D:/1_R_workfile/Github/5.ZCPstates/ZCPstates/data/uniprotEnrich_demo_input.RData")
load("D:/1_R_workfile/Github/5.ZCPstates/ZCPstates/data/uniprotEnrich_demo_library.uniprot.RData")
#读取demo数据并保存
demo=readr::read_csv("demo_test.csv",show_col_types = F)
library.uniprot=readxl::read_excel("uniprot_database/uniprotkb_proteome_UP000006548_AND_revi_2024_12_19.xlsx")
#保存为.rda文件
usethis::use_data(library.uniprot, demo, overwrite = TRUE)
#生成对应的R脚本
usethis::use_r("data")
#定义函数uniprotEnrich_plot
usethis::use_r("uniprotEnrich_plot")
uniprotEnrichplot.demo.GO.CC=readr::read_csv("go.cc.csv",show_col_types = F)
View(uniprotEnrichplot.demo.GO.CC)
#保存为.rda文件
usethis::use_data(uniprotEnrich.demo.library.uniprot, uniprotEnrich.demo.diff,uniprotEnrichplot.demo.GO.CC, overwrite = TRUE)
#读取demo数据并保存
uniprotEnrich.demo.diff=readr::read_csv("demo_test.csv",show_col_types = F)
uniprotEnrich.demo.library.uniprot=readxl::read_excel("uniprot_database/uniprotkb_proteome_UP000006548_AND_revi_2024_12_19.xlsx")
uniprotEnrichplot.demo.GO.CC=readr::read_csv("go.cc.csv",show_col_types = F)
#保存为.rda文件
usethis::use_data(uniprotEnrich.demo.library.uniprot, uniprotEnrich.demo.diff,uniprotEnrichplot.demo.GO.CC, overwrite = TRUE)
View(uniprotEnrichplot.demo.GO.CC)
uniprotEnrichplot.demo.GO.CC
#定义函数save_zcp
usethis::use_r("save_zcp")
#更新信息
devtools::document()
#测试一下
devtools::load_all()
result <- uniprotEnrich(
dt = uniprotEnrich.demo.diff,
library=uniprotEnrich.demo.library.uniprot,
protein.col.name="Entry",
Protein.separator=";",
diff.condition.col.name="Sig",
diff.markers=c("Up","Down","NotSig"),
dt.include.allproteins=TRUE,
cutoff=1,
savefile="outputfile"
)
uniprotEnrich_plot(dt = uniprotEnrichplot.demo.GO.CC,plot.type = c("bar","point","network")[1], enrich.type=c("pathway","GO")[2],GO.subset=c("BP","CC","MF","All")[2])
#' # Plot GO enrichment results as a network plot
#' uniprotEnrich_plot(dt = demo.input, plot.type = c("bar","point","network")[3],enrich.type=c("pathway","GO")[2], GO.subset=c("BP","CC","MF","All")[2],network.fontsize=2,network.minclustersize=2,network.simMethod=c("jaccard", "cosine", "cor")[1])
#'
#' @importFrom dplyr select rename mutate filter arrange
#' @importFrom stringr str_extract str_remove_all str_remove str_trim
#' @importFrom ggplot2 ggplot aes geom_point geom_col geom_text scale_y_continuous coord_flip theme_bw theme labs scale_color_gradientn scale_fill_gradientn facet_wrap
#' @importFrom crayon yellow
#' @importFrom aPEAR enrichmentNetwork
#' @export
#'
uniprotEnrich_plot=function(
dt,
plot.type=c("bar","point","network")[2],
enrich.type=c("pathway","GO")[1],
GO.subset=c("BP","CC","MF","All")[2],
network.fontsize=2,
network.minclustersize=2,
network.simMethod=c("jaccard", "cosine", "cor")[1]
){
switch (enrich.type,
"pathway" = {
dt.plot=as.data.frame(dt) |>
dplyr::select(any_of(c("Type","Pathway","p_value","FDR","hited.proteins","counts","Enrich_factor"))) |>
dplyr::rename("ONTOLOGY"="Type",
"Description"="Pathway",
"pvalue"="p_value",
"p.adjust"="FDR",
"geneID"="hited.proteins",
"Count"="counts",
"NES"="Enrich_factor"
) |>
dplyr::mutate(ID=Description)
},
"GO"={
if(!any(GO.subset%in%c("BP","CC","MF"))){
GO.subset <- c("BP","CC","MF")
cat(crayon::yellow("Defaulting to 'All' GO enrichment data.--zcp\n"))
}
if(length(GO.subset)==1){
GO.subset <- GO.subset[[1]]
dt.plot=as.data.frame(dt) |> dplyr:: mutate(
ID = stringr::str_extract(Pathway, "\\[.*?\\]") |> stringr::str_remove_all("\\[|\\]"),
Description = stringr::str_remove(Pathway, "\\[.*?\\]") |> stringr::str_trim()
) |>
dplyr::select(!Pathway) |>
dplyr::rename("ONTOLOGY"="Type",
"NES"="Enrich_factor",
"pvalue"="p_value",
"p.adjust"="FDR",
"geneID"="hited.proteins",
"Count"="counts"
)   |>
dplyr::filter(ONTOLOGY==GO.subset)
}else{
dt.plot=as.data.frame(dt) |> dplyr:: mutate(
ID = stringr::str_extract(Pathway, "\\[.*?\\]") |> stringr::str_remove_all("\\[|\\]"),
Description = stringr::str_remove(Pathway, "\\[.*?\\]") |> stringr::str_trim()
) |>
dplyr::select(!Pathway) |>
dplyr::rename("ONTOLOGY"="Type",
"NES"="Enrich_factor",
"pvalue"="p_value",
"p.adjust"="FDR",
"geneID"="hited.proteins",
"Count"="counts"
)
}
}
)
switch (plot.type,
"network" = {#
plt.network=suppressMessages(
suppressWarnings(
aPEAR::enrichmentNetwork(dt.plot,
drawEllipses = TRUE,
simMethod=network.simMethod,#方法参数
repelLabels=TRUE,
colorBy = 'NES',
nodeSize = 'Count',
colorType = c("nes", "pval")[1],
minClusterSize=network.minclustersize,
fontSize = network.fontsize,
verbose = FALSE)+
#ggplot2::scale_color_gradientn(colours = c("#006AD2","white","#AF217C"),name = "Enrich factor")+
ggplot2::scale_color_gradientn(colours = c("#1A5592","white","#B83D3D"),name = "Enrich factor")+
#viridis::scale_color_viridis(option = viridis.color,name="Enrich factor")+#,direction = -1
ggplot2::guides(size = ggplot2::guide_legend(title = "Pathway size"))+
ggplot2:: theme(legend.text = ggplot2::element_text(size = 10),
legend.position = "left")
))
},
"point"={#
plt.network=
ggplot2::ggplot(data = dt.plot,ggplot2::aes(x=Description,y=Count,size=Count,color=-log10(pvalue)))+
ggplot2::geom_point(alpha=0.9)+
ggplot2::scale_size_continuous(range = c(2, 5), name = "Count") +
ggplot2::facet_wrap(~ONTOLOGY,scales = "free")+
ggplot2::theme_bw(base_size = 8)+
ggplot2::theme(
panel.grid.major = ggplot2::element_blank(),
panel.grid.minor = ggplot2::element_blank()#,
# legend.position = "bottom"
)+
#ggplot2::labs(x="Count")+
ggplot2::coord_flip()+
#viridis::scale_color_viridis(option = "A",name="-log10 pvalue")+
ggplot2::scale_color_gradientn(colours = c("#1A5592","white","#B83D3D"),name = "-log10 pvalue")+
ggplot2::guides(size = "none")
},
"bar"={#
dt.plot1=dt.plot |>  dplyr::arrange(Count) |>  dplyr::mutate(Description=factor(Description,Description)) |>
dplyr::mutate(AdjustedCount = Count * 0.8)
plt.network=
ggplot2::ggplot(data = dt.plot1,ggplot2::aes(x=Description,y=Count,fill=-log10(pvalue)))+
ggplot2::geom_col(color="black",linewidth=0.3)+
ggplot2::geom_text(
ggplot2::aes(label = paste0("NES: ", sprintf("%0.2f", NES)), y = Count),
parse = TRUE,
hjust = -0.1,
size = 2
)+
ggplot2::scale_y_continuous(expand = c(0, 0), limits = c(0, max(dt.plot1$Count) * 1.2))+
ggplot2::facet_wrap(~ONTOLOGY,scales = "free")+
ggplot2::theme_bw(base_size = 8)+
ggplot2::theme(
panel.grid.major = ggplot2::element_blank(),
panel.grid.minor = ggplot2::element_blank()#,
# legend.position = "bottom"
)+
ggplot2::coord_flip()+
ggplot2::labs(y="Count",y=NULL)+
ggplot2::scale_fill_gradientn(colours = c("#1A5592","white","#B83D3D"),name = "-log10 pvalue")
}
)
return(plt.network)
}
#更新信息
devtools::document()
#测试一下
devtools::load_all()
#更新信息
devtools::document()
rm(list = c("uniprotEnrich_plot"))
#更新信息
devtools::document()
#测试一下
devtools::load_all()
result <- uniprotEnrich(
dt = uniprotEnrich.demo.diff,
library=uniprotEnrich.demo.library.uniprot,
protein.col.name="Entry",
Protein.separator=";",
diff.condition.col.name="Sig",
diff.markers=c("Up","Down","NotSig"),
dt.include.allproteins=TRUE,
cutoff=1,
savefile="outputfile"
)
uniprotEnrich_plot(dt = uniprotEnrichplot.demo.GO.CC,plot.type = c("bar","point","network")[1], enrich.type=c("pathway","GO")[2],GO.subset=c("BP","CC","MF","All")[2])
uniprotEnrich_plot(dt = uniprotEnrichplot.demo.GO.CC,plot.type = c("bar","point","network")[2], enrich.type=c("pathway","GO")[2],GO.subset=c("BP","CC","MF","All")[2])
uniprotEnrich_plot(dt = uniprotEnrichplot.demo.GO.CC,plot.type = c("bar","point","network")[3], enrich.type=c("pathway","GO")[2],GO.subset=c("BP","CC","MF","All")[2])
pltnet=uniprotEnrich_plot(dt = demo.input, plot.type = c("bar","point","network")[3],enrich.type=c("pathway","GO")[2], GO.subset=c("BP","CC","MF","All")[2],network.fontsize=2,network.minclustersize=2,network.simMethod=c("jaccard", "cosine", "cor")[1])
pltnet=uniprotEnrich_plot(dt = uniprotEnrichplot.demo.GO.CC, plot.type = c("bar","point","network")[3],enrich.type=c("pathway","GO")[2], GO.subset=c("BP","CC","MF","All")[2],network.fontsize=2,network.minclustersize=2,network.simMethod=c("jaccard", "cosine", "cor")[1])
dt=uniprotEnrichplot.demo.GO.CC
plot.type=c("bar","point","network")[3]
enrich.type=c("pathway","GO")[2]
GO.subset=c("BP","CC","MF","All")[2]
network.fontsize=2
network.minclustersize=2
network.simMethod=c("jaccard", "cosine", "cor")[1]
switch (enrich.type,
"pathway" = {
dt.plot=as.data.frame(dt) |>
dplyr::select(any_of(c("Type","Pathway","p_value","FDR","hited.proteins","counts","Enrich_factor"))) |>
dplyr::rename("ONTOLOGY"="Type",
"Description"="Pathway",
"pvalue"="p_value",
"p.adjust"="FDR",
"geneID"="hited.proteins",
"Count"="counts",
"NES"="Enrich_factor"
) |>
dplyr::mutate(ID=Description)
},
"GO"={
if(!any(GO.subset%in%c("BP","CC","MF"))){
GO.subset <- c("BP","CC","MF")
cat(crayon::yellow("Defaulting to 'All' GO enrichment data.--zcp\n"))
}
if(length(GO.subset)==1){
GO.subset <- GO.subset[[1]]
dt.plot=as.data.frame(dt) |> dplyr:: mutate(
ID = stringr::str_extract(Pathway, "\\[.*?\\]") |> stringr::str_remove_all("\\[|\\]"),
Description = stringr::str_remove(Pathway, "\\[.*?\\]") |> stringr::str_trim()
) |>
dplyr::select(!Pathway) |>
dplyr::rename("ONTOLOGY"="Type",
"NES"="Enrich_factor",
"pvalue"="p_value",
"p.adjust"="FDR",
"geneID"="hited.proteins",
"Count"="counts"
)   |>
dplyr::filter(ONTOLOGY==GO.subset)
}else{
dt.plot=as.data.frame(dt) |> dplyr:: mutate(
ID = stringr::str_extract(Pathway, "\\[.*?\\]") |> stringr::str_remove_all("\\[|\\]"),
Description = stringr::str_remove(Pathway, "\\[.*?\\]") |> stringr::str_trim()
) |>
dplyr::select(!Pathway) |>
dplyr::rename("ONTOLOGY"="Type",
"NES"="Enrich_factor",
"pvalue"="p_value",
"p.adjust"="FDR",
"geneID"="hited.proteins",
"Count"="counts"
)
}
}
)
View(dt.plot)
plot.type
suppressMessages(
suppressWarnings(
aPEAR::enrichmentNetwork(dt.plot,
drawEllipses = TRUE,
simMethod=network.simMethod,#方法参数
repelLabels=TRUE,
colorBy = 'NES',
nodeSize = 'Count',
colorType = c("nes", "pval")[1],
minClusterSize=network.minclustersize,
fontSize = network.fontsize,
verbose = FALSE)+
#ggplot2::scale_color_gradientn(colours = c("#006AD2","white","#AF217C"),name = "Enrich factor")+
ggplot2::scale_color_gradientn(colours = c("#1A5592","white","#B83D3D"),name = "Enrich factor")+
#viridis::scale_color_viridis(option = viridis.color,name="Enrich factor")+#,direction = -1
ggplot2::guides(size = ggplot2::guide_legend(title = "Pathway size"))+
ggplot2:: theme(legend.text = ggplot2::element_text(size = 10),
legend.position = "left")
))
rm(list=ls())
#读取demo数据并保存
uniprotEnrich.demo.diff=readr::read_csv("demo_test.csv",show_col_types = F)
#读取demo数据并保存
uniprotEnrich.demo.diff=readr::read_csv("demo_test.csv",show_col_types = F)
uniprotEnrich.demo.library.uniprot=readxl::read_excel("uniprot_database/uniprotkb_proteome_UP000006548_AND_revi_2024_12_19.xlsx")
uniprotEnrichplot.demo.GO.CC=readr::read_csv("go.cc.all.csv",show_col_types = F)
View(uniprotEnrichplot.demo.GO.CC)
#保存为.rda文件
usethis::use_data(uniprotEnrich.demo.library.uniprot, uniprotEnrich.demo.diff,uniprotEnrichplot.demo.GO.CC, overwrite = TRUE)
#更新信息
devtools::document()
#测试一下
devtools::load_all()
pltnet=uniprotEnrich_plot(dt = uniprotEnrichplot.demo.GO.CC, plot.type = c("bar","point","network")[3],enrich.type=c("pathway","GO")[2], GO.subset=c("BP","CC","MF","All")[2],network.fontsize=2,network.minclustersize=2,network.simMethod=c("jaccard", "cosine", "cor")[1])
pltnet
uniprotEnrich_plot(dt = go.cc.top10,plot.type = c("bar","point","network")[2], enrich.type=c("pathway","GO")[2],GO.subset=c("BP","CC","MF","All")[2])
go.cc.top10 <- as.data.frame(uniprotEnrichplot.demo.GO.CC) |> dplyr:: filter(Type=="CC") |>  dplyr:: slice_max(order_by = counts, n = 10)
uniprotEnrich_plot(dt = go.cc.top10,plot.type = c("bar","point","network")[2], enrich.type=c("pathway","GO")[2],GO.subset=c("BP","CC","MF","All")[2])
devtools::build()
#check
devtools::check()
rm(list = ls())
#check
devtools::check()
pkgbuild::check_build_tools(debug = TRUE)
#check
devtools::check()
#更新信息
devtools::document()
#check
devtools::check()
#check
devtools::document()
devtools::check()
#check
devtools::document()
devtools::check()
load("D:/1_R_workfile/Github/5.ZCPstates/ZCPstates/data/uniprotEnrich.demo.diff.rda")
View(uniprotEnrich.demo.diff)
View(uniprotEnrich.demo.diff)
#check
devtools::document()
devtools::check()
devtools::install_github("Chuanping-Zhao/ZCPstates")
devtools::install_github("Chuanping-Zhao/ZCPstates")
knitr::opts_chunk$set(echo = TRUE)
library(ZCPstates)
data("uniprotEnrich.demo.diff", package = "ZCPstates")
data("uniprotEnrich.demo.library.uniprot", package = "ZCPstates")
force(uniprotEnrich.demo.diff)
force(uniprotEnrich.demo.library.uniprot)
uniprotEnrich.demo.diff
uniprotEnrich.demo.library.uniprot
result <- ZCPstates::uniprotEnrich(
dt = uniprotEnrich.demo.diff,
library=uniprotEnrich.demo.library.uniprot,
protein.col.name="Entry",
Protein.separator=";",
diff.condition.col.name="Sig",
diff.markers=c("Up","Down","NotSig"),
dt.include.allproteins=TRUE,
cutoff=1,
savefile="outputfile"
)
result
tibble::as_tibble(result$all$pathway_enrich_result)
go.cc=as.data.frame(result$Up$go_enrichment)
go.cc=as.data.frame(result$Up$go_enrichment) |>  dplyr::filter(Type=="CC")
go.cc
go.cc=as.data.frame(result$Up$go_enrichment) |>  dplyr::filter(Type=="CC")
ZCPstates::uniprotEnrich_plot(dt = go.cc.top10,plot.type = c("bar","point","network")[2], enrich.type=c("pathway","GO")[2],GO.subset=c("BP","CC","MF","All")[2])
ZCPstates::uniprotEnrich_plot(dt = uniprotEnrichplot.demo.GO.CC, plot.type = c("bar","point","network")[3],enrich.type=c("pathway","GO")[2], GO.subset=c("BP","CC","MF","All")[2],network.fontsize=2,network.minclustersize=2,network.simMethod=c("jaccard", "cosine", "cor")[1])
go.cc.top10=go.cc |> dplyr:: slice_max(order_by = counts, n = 10)
uniprotEnrich_plot(dt = go.cc.top10,plot.type = c("bar","point","network")[2], enrich.type=c("pathway","GO")[2],GO.subset=c("BP","CC","MF","All")[2])
uniprotEnrich_plot(dt = go.cc.top10,plot.type = c("bar","point","network")[1], enrich.type=c("pathway","GO")[2],GO.subset=c("BP","CC","MF","All")[2])
ZCPstates::save_zcp(Fig = plt.go.cc.network,FigName = "plt.go.cc.network",outputfile = "Figure",widths = 5,heights = 4,ppt = F)
plt.go.cc.network=ZCPstates::uniprotEnrich_plot(dt = uniprotEnrichplot.demo.GO.CC, plot.type = c("bar","point","network")[3],enrich.type=c("pathway","GO")[2], GO.subset=c("BP","CC","MF","All")[2],network.fontsize=2,network.minclustersize=2,network.simMethod=c("jaccard", "cosine", "cor")[1])
ZCPstates::save_zcp(Fig = plt.go.cc.network,FigName = "plt.go.cc.network",outputfile = "Figure",widths = 5,heights = 4,ppt = F)
plt.go.cc.network
plt.go.cc.top10.scatter=uniprotEnrich_plot(dt = go.cc.top10,plot.type = c("bar","point","network")[2], enrich.type=c("pathway","GO")[2],GO.subset=c("BP","CC","MF","All")[2])
plt.go.cc.top10.scatter=uniprotEnrich_plot(dt = go.cc.top10,plot.type = c("bar","point","network")[2], enrich.type=c("pathway","GO")[2],GO.subset=c("BP","CC","MF","All")[2])
ZCPstates::save_zcp(Fig = plt.go.cc.top10.scatter,FigName = "plt.go.cc.top10.scatter",outputfile = "Figure",widths = 4,heights = 5)
ZCPstates::save_zcp(Fig = plt.go.cc.top10.scatter,FigName = "plt.go.cc.top10.scatter",outputfile = "Figure",widths = 4,heights =3)
plt.go.cc.top10.scatter
plt.go.cc.top10.bar=uniprotEnrich_plot(dt = go.cc.top10,plot.type = c("bar","point","network")[1], enrich.type=c("pathway","GO")[2],GO.subset=c("BP","CC","MF","All")[2])
ZCPstates::save_zcp(Fig = plt.go.cc.top10.bar,FigName = "plt.go.cc.top10.bar",outputfile = "Figure",widths = 3,heights =4,ppt = F)
ZCPstates::save_zcp(Fig = plt.go.cc.top10.bar,FigName = "plt.go.cc.top10.bar",outputfile = "Figure",widths = 4,heights =4,ppt = F)
rmarkdown::render("README.Rmd")
rmarkdown::render("read me.Rmd")
rmarkdown::render("README.Rmd")
rmarkdown::render("README.Rmd")
rmarkdown::render("README.Rmd", output_format = "github_document")
#check
devtools::document()
#更新信息
devtools::document()
devtools::install_github("Chuanping-Zhao/ZCPstates")
devtools::document()
getwd()
getwd()
devtools::install_github("Chuanping-Zhao/ZCPstates")
