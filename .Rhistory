group.col="BioReplicate"
fillcolor_high="#EC7607"
fillcolor_low="#077DEC"
fontsize=2
colsym = rlang::sym(intensity.col)
if(!is.null(intensity.col)){
dt_Jaccard = dt |>
dplyr::filter(!is.na(!!colsym)) |>
dplyr::filter({
val = !!colsym
if (is.numeric(val)) {
!is.nan(val) & val != 0
} else {
val != "" & val != "0"
}
})
}else{
dt_Jaccard = dt
}
Jaccard_set_list=split(dt_Jaccard[[protein.col]], dt_Jaccard[[group.col]])
.calculate_jaccard =function(set1, set2) {
intersection = length(intersect(set1, set2))
union = length(union(set1, set2))
jaccard_index =intersection / union
return(jaccard_index)
}
jaccard_indices= matrix(nrow = length(Jaccard_set_list), ncol = length(Jaccard_set_list))
#计算每一对的 Jaccard 指数
for (i in seq_along(Jaccard_set_list)) {
for (j in seq_along(Jaccard_set_list)) {
jaccard_indices[i, j] = .calculate_jaccard(Jaccard_set_list[[i]], Jaccard_set_list[[j]])
}
}
# 给矩阵加上行名和列名
rownames(jaccard_indices)= colnames(jaccard_indices)= names(Jaccard_set_list)
#提取矩阵的右下角
get_lower_tri = function(mat) {
mat[upper.tri(mat)] = NA
return(mat)
}
#获得右下角矩阵数据
jaccard_indices_plot_old = reshape2::melt(get_lower_tri(jaccard_indices), na.rm = TRUE)
jaccard_indices_plot= get_lower_tri(jaccard_indices) |>
as.table() |>
as.data.frame() |>
dplyr::filter(!is.na(Freq)) |>
dplyr::rename(Var1 = Var1, Var2 = Var2, value = Freq)
identical(jaccard_indices_plot,jaccard_indices_plot_old)
View(jaccard_indices_plot_old)
View(jaccard_indices_plot)
jaccard_indices_plot = reshape2::melt(get_lower_tri(jaccard_indices), na.rm = TRUE)
#定义标签
labz =unique(jaccard_indices_plot$Var1)
jaccard_indices_mean =mean(jaccard_indices_plot$value)
plt_jaccard_indices = ggplot2::ggplot(jaccard_indices_plot,ggplot2:: aes(x=Var1, y=Var2, fill=value)) +
ggplot2::geom_tile(color = "black",size=0.3)+
ggplot2::scale_x_discrete(labels= labz) +
ggplot2::scale_y_discrete(labels= labz, position = "right") + #y轴置于右侧
ggplot2::theme_classic() +
ggplot2::labs(x =NULL,
y = NULL,
fill = "Jaccard Index",
title="Protein Jaccard Index",
subtitle = paste0("Average Jaccard Index:",round(jaccard_indices_mean, 2)*100,"%")) +
ggplot2::theme(axis.text.x = ggplot2::element_text(size = 5,angle = 45,vjust = 1,hjust = 1),
axis.text.y = ggplot2::element_text(size=5),
axis.title.y = ggplot2::element_text(size=5),
axis.title.x = ggplot2::element_text(size=5),
legend.text = ggplot2::element_text(size=10),
legend.title = ggplot2::element_text(size=10),
plot.title = ggplot2::element_text(hjust = 0.5,size=10),
plot.subtitle = ggplot2::element_text(hjust = 0.5,size=10,color = "#EC7607"),
axis.line = ggplot2::element_line(size = 0.3),  # 设置坐标轴线的粗细
axis.ticks = ggplot2::element_line(size = 0.3),  # 设置刻度线的粗细
legend.spacing.x = grid::unit(1.0, 'cm'),
legend.position = "top")+
ggplot2:: scale_fill_gradient2(high = fillcolor_high, low =fillcolor_low ,midpoint=0.5,limits=c(0, 1), breaks = c(0, 0.5, 1),
labels = scales::percent_format(accuracy = 1)
) +
ggplot2::geom_text(ggplot2::aes(label = round(value, 2)*100),size = fontsize);plt_jaccard_indices
jaccard_indices_plot= get_lower_tri(jaccard_indices) |>
as.table() |>
as.data.frame() |>
dplyr::filter(!is.na(Freq)) |>
dplyr::rename(Var1 = Var1, Var2 = Var2, value = Freq)
#定义标签
labz =unique(jaccard_indices_plot$Var1)
jaccard_indices_mean =mean(jaccard_indices_plot$value)
plt_jaccard_indices = ggplot2::ggplot(jaccard_indices_plot,ggplot2:: aes(x=Var1, y=Var2, fill=value)) +
ggplot2::geom_tile(color = "black",size=0.3)+
ggplot2::scale_x_discrete(labels= labz) +
ggplot2::scale_y_discrete(labels= labz, position = "right") + #y轴置于右侧
ggplot2::theme_classic() +
ggplot2::labs(x =NULL,
y = NULL,
fill = "Jaccard Index",
title="Protein Jaccard Index",
subtitle = paste0("Average Jaccard Index:",round(jaccard_indices_mean, 2)*100,"%")) +
ggplot2::theme(axis.text.x = ggplot2::element_text(size = 5,angle = 45,vjust = 1,hjust = 1),
axis.text.y = ggplot2::element_text(size=5),
axis.title.y = ggplot2::element_text(size=5),
axis.title.x = ggplot2::element_text(size=5),
legend.text = ggplot2::element_text(size=10),
legend.title = ggplot2::element_text(size=10),
plot.title = ggplot2::element_text(hjust = 0.5,size=10),
plot.subtitle = ggplot2::element_text(hjust = 0.5,size=10,color = "#EC7607"),
axis.line = ggplot2::element_line(size = 0.3),  # 设置坐标轴线的粗细
axis.ticks = ggplot2::element_line(size = 0.3),  # 设置刻度线的粗细
legend.spacing.x = grid::unit(1.0, 'cm'),
legend.position = "top")+
ggplot2:: scale_fill_gradient2(high = fillcolor_high, low =fillcolor_low ,midpoint=0.5,limits=c(0, 1), breaks = c(0, 0.5, 1),
labels = scales::percent_format(accuracy = 1)
) +
ggplot2::geom_text(ggplot2::aes(label = round(value, 2)*100),size = fontsize);plt_jaccard_indices
#' @importFrom dplyr filter rename
#' @importFrom rlang sym
#' @importFrom ggplot2 ggplot aes geom_tile scale_x_discrete scale_y_discrete
#' @importFrom ggplot2 theme_classic theme labs element_text element_line element_blank
#' @importFrom ggplot2 scale_fill_gradient2 geom_text
#' @importFrom grid unit
#' @importFrom scales percent_format
#'
#' @export
#'
jaccard_indices=function(dt,
intensity.col = "Abundance",
protein.col="Protein",
group.col="BioReplicate",
fillcolor_high="#EC7607",
fillcolor_low="#077DEC",
fontsize=2
){
colsym = rlang::sym(intensity.col)
if(!is.null(intensity.col)){
dt_Jaccard = dt |>
dplyr::filter(!is.na(!!colsym)) |>
dplyr::filter({
val = !!colsym
if (is.numeric(val)) {
!is.nan(val) & val != 0
} else {
val != "" & val != "0"
}
})
}else{
dt_Jaccard = dt
}
Jaccard_set_list=split(dt_Jaccard[[protein.col]], dt_Jaccard[[group.col]])
.calculate_jaccard =function(set1, set2) {
intersection = length(intersect(set1, set2))
union = length(union(set1, set2))
jaccard_index =intersection / union
return(jaccard_index)
}
jaccard_indices= matrix(nrow = length(Jaccard_set_list), ncol = length(Jaccard_set_list))
#计算每一对的 Jaccard 指数
for (i in seq_along(Jaccard_set_list)) {
for (j in seq_along(Jaccard_set_list)) {
jaccard_indices[i, j] = .calculate_jaccard(Jaccard_set_list[[i]], Jaccard_set_list[[j]])
}
}
# 给矩阵加上行名和列名
rownames(jaccard_indices)= colnames(jaccard_indices)= names(Jaccard_set_list)
#提取矩阵的右下角
get_lower_tri = function(mat) {
mat[upper.tri(mat)] = NA
return(mat)
}
#获得右下角矩阵数据
#jaccard_indices_plot = reshape2::melt(get_lower_tri(jaccard_indices), na.rm = TRUE)
jaccard_indices_plot= get_lower_tri(jaccard_indices) |>
as.table() |>
as.data.frame() |>
dplyr::filter(!is.na(Freq)) |>
dplyr::rename(Var1 = Var1, Var2 = Var2, value = Freq)
#定义标签
labz =unique(jaccard_indices_plot$Var1)
jaccard_indices_mean =mean(jaccard_indices_plot$value)
plt_jaccard_indices = ggplot2::ggplot(jaccard_indices_plot,ggplot2:: aes(x=Var1, y=Var2, fill=value)) +
ggplot2::geom_tile(color = "black",size=0.3)+
ggplot2::scale_x_discrete(labels= labz) +
ggplot2::scale_y_discrete(labels= labz, position = "right") + #y轴置于右侧
ggplot2::theme_classic() +
ggplot2::labs(x =NULL,
y = NULL,
fill = "Jaccard Index",
title="Protein Jaccard Index",
subtitle = paste0("Average Jaccard Index:",round(jaccard_indices_mean, 2)*100,"%")) +
ggplot2::theme(axis.text.x = ggplot2::element_text(size = 5,angle = 45,vjust = 1,hjust = 1),
axis.text.y = ggplot2::element_text(size=5),
axis.title.y = ggplot2::element_text(size=5),
axis.title.x = ggplot2::element_text(size=5),
legend.text = ggplot2::element_text(size=10),
legend.title = ggplot2::element_text(size=10),
plot.title = ggplot2::element_text(hjust = 0.5,size=10),
plot.subtitle = ggplot2::element_text(hjust = 0.5,size=10,color = "#EC7607"),
axis.line = ggplot2::element_line(size = 0.3),  # 设置坐标轴线的粗细
axis.ticks = ggplot2::element_line(size = 0.3),  # 设置刻度线的粗细
legend.spacing.x = grid::unit(1.0, 'cm'),
legend.position = "top")+
ggplot2:: scale_fill_gradient2(high = fillcolor_high, low =fillcolor_low ,midpoint=0.5,limits=c(0, 1), breaks = c(0, 0.5, 1),
labels = scales::percent_format(accuracy = 1)
) +
ggplot2::geom_text(ggplot2::aes(label = round(value, 2)*100),size = fontsize);plt_jaccard_indices
return(list(
plot = plt_jaccard_indices,
jaccard_indices = jaccard_indices_plot
))
}
jaccard_indices(dt,
intensity.col = "Abundance",
protein.col="Protein",
group.col="BioReplicate",
fillcolor_high="#EC7607",
fillcolor_low="#077DEC",
fontsize=2)
devtools::document()
devtools::document()
devtools::check()
devtools::install_github("Chuanping-Zhao/ZCPstates")
?heatmap_cor
??heatmap_cor
heatmap_cor
library(ZCPstates)
?boxdensity
pltvenn()
pltvenn
?pltvenn
common_elements = c("a", "b", "c", "d", "e")
group1 = c(common_elements, sample(letters[6:26], 5))
group2 = c(common_elements, sample(letters[6:26], 5))
group3 = c(common_elements, sample(letters[6:26], 5))
dt = data.frame(
id = c(group1, group2, group3),
group = rep(c("group1", "group2", "group3"), each = length(common_elements) + 5)
)
pltvenn(dt, group.by = "group", proteincol.id = "id",type=c("ellipse","circle")[2],fill.alpha = 1)
pltvenn(dt, group.by = "group", proteincol.id = "id",type=c("ellipse","circle")[2],fill.alpha = 0.5)
pltvenn(dt, group.by = "group", proteincol.id = "id",type=c("ellipse","circle")[2],fill.alpha = 0.8)
pltvenn(dt, group.by = "group", proteincol.id = "id",type=c("ellipse","circle")[1],fill.alpha = 0.8)
devtools::install_github("Chuanping-Zhao/ZCPstates")
library(ZCPstates)
ls("package:ZCPstates")
devtools::document()
devtools::check()
devtools::install_github("Chuanping-Zhao/ZCPstates")
library(ZCPstates)
ls("package:ZCPstates")
devtools::document()
devtools::check()
#' group3 = c(common_elements, sample(letters[6:26], 5))
#'
#' dt = data.frame(
#'   id = c(group1, group2, group3),
#'   group = rep(c("group1", "group2", "group3"), each = length(common_elements) + 5)
#' )
#' pltvenn(dt, group.by = "group", proteincol.id = "id",type=c("ellipse","circle")[1])
#'
#' @export
#'
pltvenn= function(dat_long, group.by = "sample", proteincol.id = "Accession",fill.alpha=0.3,type=c("ellipse","circle")[1]){
#使用 sym() 和 !! 来动态引用列名
group_col <- rlang::sym(group.by)
protein_col <- rlang::sym(proteincol.id)
#按指定的分组列去重
proteins <- dat_long |>
dplyr::group_by(!!group_col)  |>
dplyr::distinct(!!protein_col, .keep_all = TRUE) |>
dplyr::ungroup()
#色
my_fin_colors <-   c("turquoise3", "palevioletred3", "#ceca7c",
"turquoise3", "palevioletred3", "#ceca7c",
"#c59fc9", "#84b59f", "cornflowerblue",
"salmon3","#5698c4", "#d88c9a")
# c("#BE507E", "#ED7D31", "#9183BA", "#C00000", "#29719D","#BE507E", "#ED7D31", "#9183BA", "#C00000", "#29719D")
list_proteins <- split(proteins[[proteincol.id]], proteins[[group.by]])
#绘
proteins_venn <- plot(eulerr::euler(list_proteins, shape =type), # ellipse   circle
quantities = list(type = c("counts", "percent"),cex=0.8),
labels = list(font =2,col=my_fin_colors,cex=1.2),# font=1 2 3 4代表集合标签 普通文本 加粗文本 斜体文本 斜体加粗文本
fill = my_fin_colors,
edges=TRUE,#是否增加线条颜色
#edge_col= my_fin_colors ,
alpha =fill.alpha
);proteins_venn
return(proteins_venn)
}
common_elements = c("a", "b", "c", "d", "e")
group1 = c(common_elements, sample(letters[6:26], 5))
group2 = c(common_elements, sample(letters[6:26], 5))
group3 = c(common_elements, sample(letters[6:26], 5))
dt = data.frame(
id = c(group1, group2, group3),
group = rep(c("group1", "group2", "group3"), each = length(common_elements) + 5)
)
pltvenn(dt, group.by = "group", proteincol.id = "id",type=c("ellipse","circle")[1])
View(pltvenn)
pltvenn(dt, group.by = "group", proteincol.id = "id",type=c("ellipse","circle")[1],fill.alpha = 1)
#' group3 = c(common_elements, sample(letters[6:26], 5))
#'
#' dt = data.frame(
#'   id = c(group1, group2, group3),
#'   group = rep(c("group1", "group2", "group3"), each = length(common_elements) + 5)
#' )
#' pltvenn(dt, group.by = "group", proteincol.id = "id",type=c("ellipse","circle")[1])
#'
#' @export
#'
pltvenn= function(dat_long, group.by = "sample", proteincol.id = "Accession",fill.alpha=0.3,type=c("ellipse","circle")[1]){
#使用 sym() 和 !! 来动态引用列名
group_col <- rlang::sym(group.by)
protein_col <- rlang::sym(proteincol.id)
#按指定的分组列去重
proteins <- dat_long |>
dplyr::group_by(!!group_col)  |>
dplyr::distinct(!!protein_col, .keep_all = TRUE) |>
dplyr::ungroup()
#色
my_fin_colors <-    c("turquoise3","palevioletred3","#ceca7c","turquoise3","palevioletred3","#ceca7c",
"#c59fc9", "#84b59f", "cornflowerblue",
"salmon3","#5698c4", "#d88c9a")
# c("#BE507E", "#ED7D31", "#9183BA", "#C00000", "#29719D","#BE507E", "#ED7D31", "#9183BA", "#C00000", "#29719D")
list_proteins <- split(proteins[[proteincol.id]], proteins[[group.by]])
#绘
proteins_venn <- plot(eulerr::euler(list_proteins, shape =type), # ellipse   circle
quantities = list(type = c("counts", "percent"),cex=0.8),
labels = list(font =2,col=my_fin_colors,cex=1.2),# font=1 2 3 4代表集合标签 普通文本 加粗文本 斜体文本 斜体加粗文本
fill = my_fin_colors,
edges=TRUE,#是否增加线条颜色
#edge_col= my_fin_colors ,
alpha =fill.alpha
);proteins_venn
return(proteins_venn)
}
pltvenn(dt, group.by = "group", proteincol.id = "id",type=c("ellipse","circle")[1],fill.alpha = 1)
#色
my_fin_colors <- c("turquoise3", "palevioletred3", "#ceca7c", "turquoise3", "palevioletred3", "#ceca7c")
#' group3 = c(common_elements, sample(letters[6:26], 5))
#'
#' dt = data.frame(
#'   id = c(group1, group2, group3),
#'   group = rep(c("group1", "group2", "group3"), each = length(common_elements) + 5)
#' )
#' pltvenn(dt, group.by = "group", proteincol.id = "id",type=c("ellipse","circle")[1])
#'
#' @export
#'
pltvenn= function(dat_long, group.by = "sample", proteincol.id = "Accession",fill.alpha=0.3,type=c("ellipse","circle")[1]){
#使用 sym() 和 !! 来动态引用列名
group_col <- rlang::sym(group.by)
protein_col <- rlang::sym(proteincol.id)
#按指定的分组列去重
proteins <- dat_long |>
dplyr::group_by(!!group_col)  |>
dplyr::distinct(!!protein_col, .keep_all = TRUE) |>
dplyr::ungroup()
#色
my_fin_colors <- c("turquoise3", "palevioletred3", "#ceca7c", "turquoise3", "palevioletred3", "#ceca7c")
# c("#BE507E", "#ED7D31", "#9183BA", "#C00000", "#29719D","#BE507E", "#ED7D31", "#9183BA", "#C00000", "#29719D")
list_proteins <- split(proteins[[proteincol.id]], proteins[[group.by]])
#绘
proteins_venn <- plot(eulerr::euler(list_proteins, shape =type), # ellipse   circle
quantities = list(type = c("counts", "percent"),cex=0.8),
labels = list(font =2,col=my_fin_colors,cex=1.2),# font=1 2 3 4代表集合标签 普通文本 加粗文本 斜体文本 斜体加粗文本
fill = my_fin_colors,
edges=TRUE,#是否增加线条颜色
#edge_col= my_fin_colors ,
alpha =fill.alpha
);proteins_venn
return(proteins_venn)
}
pltvenn(dt, group.by = "group", proteincol.id = "id",type=c("ellipse","circle")[1],fill.alpha = 1)
#' group3 = c(common_elements, sample(letters[6:26], 5))
#'
#' dt = data.frame(
#'   id = c(group1, group2, group3),
#'   group = rep(c("group1", "group2", "group3"), each = length(common_elements) + 5)
#' )
#' pltvenn(dt, group.by = "group", proteincol.id = "id",type=c("ellipse","circle")[1])
#'
#' @export
#'
pltvenn= function(dat_long, group.by = "sample", proteincol.id = "Accession",fill.alpha=0.3,type=c("ellipse","circle")[1]){
#使用 sym() 和 !! 来动态引用列名
group_col <- rlang::sym(group.by)
protein_col <- rlang::sym(proteincol.id)
#按指定的分组列去重
proteins <- dat_long |>
dplyr::group_by(!!group_col)  |>
dplyr::distinct(!!protein_col, .keep_all = TRUE) |>
dplyr::ungroup()
#色
my_fin_colors <- c("turquoise3", "palevioletred3", "#ceca7c", "turquoise3", "palevioletred3", "#ceca7c",
"#c59fc9", "#84b59f", "cornflowerblue",
"salmon3","#5698c4", "#d88c9a"
)
# c("#BE507E", "#ED7D31", "#9183BA", "#C00000", "#29719D","#BE507E", "#ED7D31", "#9183BA", "#C00000", "#29719D")
list_proteins <- split(proteins[[proteincol.id]], proteins[[group.by]])
#绘
proteins_venn <- plot(eulerr::euler(list_proteins, shape =type), # ellipse   circle
quantities = list(type = c("counts", "percent"),cex=0.8),
labels = list(font =2,col=my_fin_colors,cex=1.2),# font=1 2 3 4代表集合标签 普通文本 加粗文本 斜体文本 斜体加粗文本
fill = my_fin_colors,
edges=TRUE,#是否增加线条颜色
#edge_col= my_fin_colors ,
alpha =fill.alpha
);proteins_venn
return(proteins_venn)
}
pltvenn(dt, group.by = "group", proteincol.id = "id",type=c("ellipse","circle")[1],fill.alpha = 1)
#' group3 = c(common_elements, sample(letters[6:26], 5))
#'
#' dt = data.frame(
#'   id = c(group1, group2, group3),
#'   group = rep(c("group1", "group2", "group3"), each = length(common_elements) + 5)
#' )
#' pltvenn(dt, group.by = "group", proteincol.id = "id",type=c("ellipse","circle")[1])
#'
#' @export
#'
pltvenn= function(dat_long, group.by = "sample", proteincol.id = "Accession",fill.alpha=0.3,type=c("ellipse","circle")[1]){
#使用 sym() 和 !! 来动态引用列名
group_col <- rlang::sym(group.by)
protein_col <- rlang::sym(proteincol.id)
#按指定的分组列去重
proteins <- dat_long |>
dplyr::group_by(!!group_col)  |>
dplyr::distinct(!!protein_col, .keep_all = TRUE) |>
dplyr::ungroup()
#色
my_fin_colors <- c("turquoise3", "palevioletred3", "#ceca7c", "turquoise3", "palevioletred3", "#ceca7c",
"turquoise3", "palevioletred3", "#ceca7c","turquoise3", "palevioletred3", "#ceca7c"
)
# c("#BE507E", "#ED7D31", "#9183BA", "#C00000", "#29719D","#BE507E", "#ED7D31", "#9183BA", "#C00000", "#29719D")
list_proteins <- split(proteins[[proteincol.id]], proteins[[group.by]])
#绘
proteins_venn <- plot(eulerr::euler(list_proteins, shape =type), # ellipse   circle
quantities = list(type = c("counts", "percent"),cex=0.8),
labels = list(font =2,col="black",cex=1.2),# font=1 2 3 4代表集合标签 普通文本 加粗文本 斜体文本 斜体加粗文本
fill = my_fin_colors,
edges=TRUE,#是否增加线条颜色
#edge_col= my_fin_colors ,
alpha =fill.alpha
);proteins_venn
return(proteins_venn)
}
pltvenn(dt, group.by = "group", proteincol.id = "id",type=c("ellipse","circle")[1],fill.alpha = 1)
fill.colors
fill.colors=NULL
fill.colors
is.null(fill.colors)
!is.null(fill.colors)
#色
if(!is.null(fill.colors)){
my_fin_colors=fill.colors
}else{
print("null")
my_fin_colors = c("turquoise3", "palevioletred3", "#ceca7c", "turquoise3", "palevioletred3", "#ceca7c)
}
# c("#BE507E", "#ED7D31", "#9183BA", "#C00000", "#29719D","#BE507E", "#ED7D31", "#9183BA", "#C00000", "#29719D")
list_proteins <- split(proteins[[proteincol.id]], proteins[[group.by]])
if(!is.null(fill.colors)){
my_fin_colors=fill.colors
}else{
print("null")
my_fin_colors = c("turquoise3", "palevioletred3", "#ceca7c", "turquoise3", "palevioletred3", "#ceca7c")
}
#' group3 = c(common_elements, sample(letters[6:26], 5))
#'
#' dt = data.frame(
#'   id = c(group1, group2, group3),
#'   group = rep(c("group1", "group2", "group3"), each = length(common_elements) + 5)
#' )
#' pltvenn(dt, group.by = "group", proteincol.id = "id",type=c("ellipse","circle")[1])
#'
#' @export
#'
pltvenn= function(dat_long, group.by = "sample", proteincol.id = "Accession",
fill.colors=NULL,
fill.alpha=0.3,type=c("ellipse","circle")[1]){
#使用 sym() 和 !! 来动态引用列名
group_col <- rlang::sym(group.by)
protein_col <- rlang::sym(proteincol.id)
#按指定的分组列去重
proteins <- dat_long |>
dplyr::group_by(!!group_col)  |>
dplyr::distinct(!!protein_col, .keep_all = TRUE) |>
dplyr::ungroup()
#色
if(!is.null(fill.colors)){
my_fin_colors=fill.colors
}else{
my_fin_colors = c("turquoise3", "palevioletred3", "#ceca7c", "turquoise3", "palevioletred3", "#ceca7c")
}
# c("#BE507E", "#ED7D31", "#9183BA", "#C00000", "#29719D","#BE507E", "#ED7D31", "#9183BA", "#C00000", "#29719D")
list_proteins <- split(proteins[[proteincol.id]], proteins[[group.by]])
#绘
proteins_venn <- plot(eulerr::euler(list_proteins, shape =type), # ellipse   circle
quantities = list(type = c("counts", "percent"),cex=0.8),
labels = list(font =2,col="black",cex=1.2),# font=1 2 3 4代表集合标签 普通文本 加粗文本 斜体文本 斜体加粗文本
fill = my_fin_colors,
edges=TRUE,#是否增加线条颜色
#edge_col= my_fin_colors ,
alpha =fill.alpha
);proteins_venn
return(proteins_venn)
}
pltvenn(dt, group.by = "group", proteincol.id = "id",type=c("ellipse","circle")[1],fill.alpha = 1)
pltvenn(dt, group.by = "group", proteincol.id = "id",type=c("ellipse","circle")[1],fill.alpha = 0.8)
devtools::document()
devtools::check()
devtools::install_github("Chuanping-Zhao/ZCPstates")
