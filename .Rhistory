#labels = scales::percent_format(accuracy = 1)
) +
ggplot2::geom_text(  ggplot2::aes(label = round(value, 3)),size = cor.fontsize,color=fontcolor)+
ggplot2::scale_x_discrete(position = "top")
corvalue_plot <- get_upper_tri(corvalue) |>
as.table() |>
as.data.frame() |>
dplyr::filter(!is.na(Freq)) |>
dplyr::rename(Var1 = Var1, Var2 = Var2, value = Freq)
View(corvalue_plot)
ggplot2::ggplot(corvalue_plot, ggplot2::aes(x=Var1, y=Var2, fill=value)) +
ggplot2::geom_tile(color = geom_tile_color,size=geom_tile_text_size) +
ggplot2::theme_classic() +
ggplot2::labs(x = NULL,
y = NULL,
fill = corInfo,
title=Title) +
ggplot2::theme(axis.text.x = ggplot2::element_text(size=lab.x.fontsize,angle = 45,vjust = 1,hjust = 0),
axis.text.y = ggplot2::element_text(size=lab.y.fontsize),
axis.title.y = ggplot2::element_text(size=8),
axis.title.x = ggplot2::element_text(size=8),
axis.ticks = ggplot2::element_blank(),
axis.line = ggplot2::element_blank(),
legend.text = ggplot2::element_text(size=8),
legend.title = ggplot2::element_text(size=10),
plot.title = ggplot2::element_text(hjust = 0.5,size=8),
legend.spacing.x = grid::unit(1.0, 'cm'),
legend.direction = "horizontal",#图例水平放置
legend.position = c(1, 0),     #图例放在右下角
legend.justification = c(1, 0)#图例左上角与1对齐
)+
ggplot2::scale_fill_gradient2(high = highcolor, low = lowcolor,midpoint=midpoints,limits=c(lowpoints,highpoints), breaks = c(lowpoints, midpoints, highpoints),
#labels = scales::percent_format(accuracy = 1)
) +
ggplot2::geom_text(  ggplot2::aes(label = round(value, 3)),size = cor.fontsize,color=fontcolor)+
ggplot2::scale_x_discrete(position = "top")
corvalue_plot <- get_upper_tri(corvalue) |>
as.table() |>
as.data.frame() |>
dplyr::filter(!is.na(Freq)) |>
dplyr::rename(Var1 = Var1, Var2 = Var2, value = Freq)
corvalue_plot <- get_lower_tri(corvalue) |>
as.table() |>
as.data.frame() |>
dplyr::filter(!is.na(Freq)) |>
dplyr::rename(Var1 = Var1, Var2 = Var2, value = Freq)
ggplot2::ggplot(corvalue_plot,  ggplot2::aes(x=Var1, y=Var2, fill=value)) +
ggplot2::geom_tile(color = geom_tile_color,size=geom_tile_text_size) +
ggplot2::theme_classic() +
ggplot2::labs(x = NULL,
y = NULL,
fill = corInfo,
title=Title) +
ggplot2:: theme(axis.text.x =  ggplot2::element_text(size=lab.x.fontsize,angle = 45,vjust = 1,hjust = 1),
axis.text.y = ggplot2:: element_text(size=lab.y.fontsize),
axis.title.y = ggplot2:: element_text(size=8),
axis.title.x =  ggplot2::element_text(size=8),
axis.ticks =  ggplot2::element_blank(),
axis.line = ggplot2:: element_blank(),
legend.text = ggplot2:: element_text(size=8),
legend.title = ggplot2:: element_text(size=10),
plot.title = ggplot2:: element_text(hjust = 0.5,size=8),
legend.spacing.x = grid::unit(1.0, 'cm'),
legend.position = "top")+
ggplot2::scale_fill_gradient2(high = highcolor, low = lowcolor,midpoint=midpoints,limits=c(lowpoints,highpoints), breaks = c(lowpoints, midpoints, highpoints),
#labels = scales::percent_format(accuracy = 1)
) +
ggplot2::geom_text( ggplot2::aes(label = round(value, 2)),size = cor.fontsize,color=fontcolor)+
ggplot2::scale_y_discrete(position = "right")
corvalue_plot <- get_all(corvalue) |>
as.table() |>
as.data.frame() |>
dplyr::filter(!is.na(Freq)) |>
dplyr::rename(Var1 = Var1, Var2 = Var2, value = Freq)
ggplot2::ggplot(corvalue_plot,  ggplot2::aes(x=Var1, y=Var2, fill=value)) +
ggplot2::geom_tile(color = geom_tile_color,size=geom_tile_text_size) +
ggplot2::theme_classic() +
ggplot2::labs(x = NULL,
y = NULL,
fill = corInfo,
title=Title) +
theme(axis.text.x = element_text(size=lab.x.fontsize,angle = 45,vjust = 1,hjust = 1),
axis.text.y = element_text(size=lab.y.fontsize),
axis.title.y = element_text(size=8),
axis.title.x = element_text(size=8),
axis.ticks = element_blank(),
axis.line = element_blank(),
legend.text = element_text(size=8),
legend.title = element_text(size=10),
plot.title = element_text(hjust = 0.5,size=10),
legend.spacing.x = unit(1.0, 'cm'),
legend.position = "top")+
scale_fill_gradient2(high = highcolor, low = lowcolor,midpoint=midpoints,limits=c(lowpoints,highpoints), breaks = c(lowpoints, midpoints, highpoints),
#labels = scales::percent_format(accuracy = 1)
) +
geom_text(aes(label = round(value, 2)),size = cor.fontsize,color=fontcolor)
#' colnames(mat) <- paste0("Sample", 1:10)
#' res <- heatmap_cor(mat, cor.method = "pearson", Type = "lower_tri")
#' res$plot  # Show the plot
#'
#' @importFrom ggplot2 ggplot aes geom_tile geom_text labs theme theme_classic element_text element_blank element_line element_rect scale_fill_gradient2 scale_x_discrete scale_y_discrete
#' @importFrom grid unit
#' @importFrom crayon yellow
#' @importFrom dplyr rename filter
#' @export
#'
heatmap_cor <- function(x,
cor.method = "spearman",#cor.method = c("pearson", "kendall", "spearman")
Type="Full",#Type="upper_tri","lower_tri","Full"
highcolor= "#492952",
lowcolor= "#1e4668",
midpoints=0.5,
lowpoints=0,
highpoints=1,
Title=NULL,
geom_tile_color="white",
geom_tile_text_size=0.3,
fontcolor="white",
lab.x.fontsize=6,
lab.y.fontsize=6,
cor.fontsize=2
){
if (!all(sapply(x, is.numeric))) {
message(crayon::yellow("Warning: Non-numeric columns detected.--zcp"))
stop("Input matrix must contain only numeric columns. --zcp")
}
if (is.data.frame(x)) {
dt_cor <- x
dt_cor[] <- lapply(dt_cor, function(x) as.numeric(as.character(x)))
} else if (is.matrix(x)) {
if (!is.numeric(x)) {
stop("Input matrix must be numeric. --zcp")
}
dt_cor <- x
} else {
stop("Input must be a matrix or data.frame. --zcp")
}
# dt_cor=x
# dt_cor[] <- lapply(x, function(x) as.numeric(as.character(x)))
corvalue <- cor(as.matrix(dt_cor), method = cor.method,use = "pairwise.complete.obs")
#提取矩阵的右下角数据函数
get_lower_tri <- function(mat) {
mat[upper.tri(mat)] <- NA
return(mat)
}
#提取矩阵的右上角数据函数
get_upper_tri <- function(mat) {
mat[lower.tri(mat)] <- NA  # 将下三角部分的元素设置为NA
return(mat)
}
#不对矩阵进行处理
get_all <- function(mat){
return(mat)
}
corInfo=paste0(cor.method, " correlation")
switch (Type,
"upper_tri" = {
#corvalue_plot <- reshape2::melt(get_upper_tri(corvalue), na.rm = TRUE)
corvalue_plot <- get_upper_tri(corvalue) |>
as.table() |>
as.data.frame() |>
dplyr::filter(!is.na(Freq)) |>
dplyr::rename(Var1 = Var1, Var2 = Var2, value = Freq)
Figcor <- ggplot2::ggplot(corvalue_plot, ggplot2::aes(x=Var1, y=Var2, fill=value)) +
ggplot2::geom_tile(color = geom_tile_color,size=geom_tile_text_size) +
ggplot2::theme_classic() +
ggplot2::labs(x = NULL,
y = NULL,
fill = corInfo,
title=Title) +
ggplot2::theme(axis.text.x = ggplot2::element_text(size=lab.x.fontsize,angle = 45,vjust = 1,hjust = 0),
axis.text.y = ggplot2::element_text(size=lab.y.fontsize),
axis.title.y = ggplot2::element_text(size=8),
axis.title.x = ggplot2::element_text(size=8),
axis.ticks = ggplot2::element_blank(),
axis.line = ggplot2::element_blank(),
legend.text = ggplot2::element_text(size=8),
legend.title = ggplot2::element_text(size=10),
plot.title = ggplot2::element_text(hjust = 0.5,size=8),
legend.spacing.x = grid::unit(1.0, 'cm'),
legend.direction = "horizontal",#图例水平放置
legend.position = c(1, 0),     #图例放在右下角
legend.justification = c(1, 0)#图例左上角与1对齐
)+
ggplot2::scale_fill_gradient2(high = highcolor, low = lowcolor,midpoint=midpoints,limits=c(lowpoints,highpoints), breaks = c(lowpoints, midpoints, highpoints),
#labels = scales::percent_format(accuracy = 1)
) +
ggplot2::geom_text(  ggplot2::aes(label = round(value, 3)),size = cor.fontsize,color=fontcolor)+
ggplot2::scale_x_discrete(position = "top")
},
"lower_tri"={#获得右下角的数据
#corvalue_plot <- reshape2::melt(get_lower_tri(corvalue), na.rm = TRUE)#|> filter(Var2==vars_filter)
corvalue_plot <- get_lower_tri(corvalue) |>
as.table() |>
as.data.frame() |>
dplyr::filter(!is.na(Freq)) |>
dplyr::rename(Var1 = Var1, Var2 = Var2, value = Freq)
Figcor <-  ggplot2::ggplot(corvalue_plot,  ggplot2::aes(x=Var1, y=Var2, fill=value)) +
ggplot2::geom_tile(color = geom_tile_color,size=geom_tile_text_size) +
ggplot2::theme_classic() +
ggplot2::labs(x = NULL,
y = NULL,
fill = corInfo,
title=Title) +
ggplot2:: theme(axis.text.x =  ggplot2::element_text(size=lab.x.fontsize,angle = 45,vjust = 1,hjust = 1),
axis.text.y = ggplot2:: element_text(size=lab.y.fontsize),
axis.title.y = ggplot2:: element_text(size=8),
axis.title.x =  ggplot2::element_text(size=8),
axis.ticks =  ggplot2::element_blank(),
axis.line = ggplot2:: element_blank(),
legend.text = ggplot2:: element_text(size=8),
legend.title = ggplot2:: element_text(size=10),
plot.title = ggplot2:: element_text(hjust = 0.5,size=8),
legend.spacing.x = grid::unit(1.0, 'cm'),
legend.position = "top")+
ggplot2::scale_fill_gradient2(high = highcolor, low = lowcolor,midpoint=midpoints,limits=c(lowpoints,highpoints), breaks = c(lowpoints, midpoints, highpoints),
#labels = scales::percent_format(accuracy = 1)
) +
ggplot2::geom_text( ggplot2::aes(label = round(value, 2)),size = cor.fontsize,color=fontcolor)+
ggplot2::scale_y_discrete(position = "right")
},
"Full"={#全部矩阵
# corvalue_plot <- reshape2::melt(get_all(corvalue), na.rm = TRUE)#|> filter(Var2==vars_filter)
corvalue_plot <- get_all(corvalue) |>
as.table() |>
as.data.frame() |>
dplyr::filter(!is.na(Freq)) |>
dplyr::rename(Var1 = Var1, Var2 = Var2, value = Freq)
Figcor <-  ggplot2::ggplot(corvalue_plot,  ggplot2::aes(x=Var1, y=Var2, fill=value)) +
ggplot2::geom_tile(color = geom_tile_color,size=geom_tile_text_size) +
ggplot2::theme_classic() +
ggplot2::labs(x = NULL,
y = NULL,
fill = corInfo,
title=Title) +
theme(axis.text.x = element_text(size=lab.x.fontsize,angle = 45,vjust = 1,hjust = 1),
axis.text.y = element_text(size=lab.y.fontsize),
axis.title.y = element_text(size=8),
axis.title.x = element_text(size=8),
axis.ticks = element_blank(),
axis.line = element_blank(),
legend.text = element_text(size=8),
legend.title = element_text(size=10),
plot.title = element_text(hjust = 0.5,size=10),
legend.spacing.x = unit(1.0, 'cm'),
legend.position = "top")+
scale_fill_gradient2(high = highcolor, low = lowcolor,midpoint=midpoints,limits=c(lowpoints,highpoints), breaks = c(lowpoints, midpoints, highpoints),
#labels = scales::percent_format(accuracy = 1)
) +
geom_text(aes(label = round(value, 2)),size = cor.fontsize,color=fontcolor)
}
)
return(list(plot=Figcor,correlation=corvalue))
}
mat <- matrix(rnorm(100), ncol = 10)
colnames(mat) <- paste0("Sample", 1:10)
res <- heatmap_cor(mat, cor.method = "pearson", Type = "lower_tri")
res$plot  # Show the plot
res <- heatmap_cor(mat, cor.method = "pearson", Type = "upper_tri")
res$plot  # Show the plot
res <- heatmap_cor(mat, cor.method = "pearson", Type = "Full")
res$plot  # Show the plot
dt <- data.frame(
Protein = paste0("P", 1:10),
BioReplicate = rep(c("Rep1", "Rep2"), each = 5),
Abundance = c(runif(5, 5, 10), runif(5, 0, 10))
)
intensity.col = "Abundance"
protein.col="Protein"
group.col="BioReplicate"
fillcolor_high="#EC7607"
fillcolor_low="#077DEC"
fontsize=2
colsym = rlang::sym(intensity.col)
if(!is.null(intensity.col)){
dt_Jaccard = dt |>
dplyr::filter(!is.na(!!colsym)) |>
dplyr::filter({
val = !!colsym
if (is.numeric(val)) {
!is.nan(val) & val != 0
} else {
val != "" & val != "0"
}
})
}else{
dt_Jaccard = dt
}
Jaccard_set_list=split(dt_Jaccard[[protein.col]], dt_Jaccard[[group.col]])
.calculate_jaccard =function(set1, set2) {
intersection = length(intersect(set1, set2))
union = length(union(set1, set2))
jaccard_index =intersection / union
return(jaccard_index)
}
jaccard_indices= matrix(nrow = length(Jaccard_set_list), ncol = length(Jaccard_set_list))
#计算每一对的 Jaccard 指数
for (i in seq_along(Jaccard_set_list)) {
for (j in seq_along(Jaccard_set_list)) {
jaccard_indices[i, j] = .calculate_jaccard(Jaccard_set_list[[i]], Jaccard_set_list[[j]])
}
}
# 给矩阵加上行名和列名
rownames(jaccard_indices)= colnames(jaccard_indices)= names(Jaccard_set_list)
#提取矩阵的右下角
get_lower_tri = function(mat) {
mat[upper.tri(mat)] = NA
return(mat)
}
#获得右下角矩阵数据
jaccard_indices_plot_old = reshape2::melt(get_lower_tri(jaccard_indices), na.rm = TRUE)
jaccard_indices_plot= get_lower_tri(jaccard_indices) |>
as.table() |>
as.data.frame() |>
dplyr::filter(!is.na(Freq)) |>
dplyr::rename(Var1 = Var1, Var2 = Var2, value = Freq)
identical(jaccard_indices_plot,jaccard_indices_plot_old)
View(jaccard_indices_plot_old)
View(jaccard_indices_plot)
jaccard_indices_plot = reshape2::melt(get_lower_tri(jaccard_indices), na.rm = TRUE)
#定义标签
labz =unique(jaccard_indices_plot$Var1)
jaccard_indices_mean =mean(jaccard_indices_plot$value)
plt_jaccard_indices = ggplot2::ggplot(jaccard_indices_plot,ggplot2:: aes(x=Var1, y=Var2, fill=value)) +
ggplot2::geom_tile(color = "black",size=0.3)+
ggplot2::scale_x_discrete(labels= labz) +
ggplot2::scale_y_discrete(labels= labz, position = "right") + #y轴置于右侧
ggplot2::theme_classic() +
ggplot2::labs(x =NULL,
y = NULL,
fill = "Jaccard Index",
title="Protein Jaccard Index",
subtitle = paste0("Average Jaccard Index:",round(jaccard_indices_mean, 2)*100,"%")) +
ggplot2::theme(axis.text.x = ggplot2::element_text(size = 5,angle = 45,vjust = 1,hjust = 1),
axis.text.y = ggplot2::element_text(size=5),
axis.title.y = ggplot2::element_text(size=5),
axis.title.x = ggplot2::element_text(size=5),
legend.text = ggplot2::element_text(size=10),
legend.title = ggplot2::element_text(size=10),
plot.title = ggplot2::element_text(hjust = 0.5,size=10),
plot.subtitle = ggplot2::element_text(hjust = 0.5,size=10,color = "#EC7607"),
axis.line = ggplot2::element_line(size = 0.3),  # 设置坐标轴线的粗细
axis.ticks = ggplot2::element_line(size = 0.3),  # 设置刻度线的粗细
legend.spacing.x = grid::unit(1.0, 'cm'),
legend.position = "top")+
ggplot2:: scale_fill_gradient2(high = fillcolor_high, low =fillcolor_low ,midpoint=0.5,limits=c(0, 1), breaks = c(0, 0.5, 1),
labels = scales::percent_format(accuracy = 1)
) +
ggplot2::geom_text(ggplot2::aes(label = round(value, 2)*100),size = fontsize);plt_jaccard_indices
jaccard_indices_plot= get_lower_tri(jaccard_indices) |>
as.table() |>
as.data.frame() |>
dplyr::filter(!is.na(Freq)) |>
dplyr::rename(Var1 = Var1, Var2 = Var2, value = Freq)
#定义标签
labz =unique(jaccard_indices_plot$Var1)
jaccard_indices_mean =mean(jaccard_indices_plot$value)
plt_jaccard_indices = ggplot2::ggplot(jaccard_indices_plot,ggplot2:: aes(x=Var1, y=Var2, fill=value)) +
ggplot2::geom_tile(color = "black",size=0.3)+
ggplot2::scale_x_discrete(labels= labz) +
ggplot2::scale_y_discrete(labels= labz, position = "right") + #y轴置于右侧
ggplot2::theme_classic() +
ggplot2::labs(x =NULL,
y = NULL,
fill = "Jaccard Index",
title="Protein Jaccard Index",
subtitle = paste0("Average Jaccard Index:",round(jaccard_indices_mean, 2)*100,"%")) +
ggplot2::theme(axis.text.x = ggplot2::element_text(size = 5,angle = 45,vjust = 1,hjust = 1),
axis.text.y = ggplot2::element_text(size=5),
axis.title.y = ggplot2::element_text(size=5),
axis.title.x = ggplot2::element_text(size=5),
legend.text = ggplot2::element_text(size=10),
legend.title = ggplot2::element_text(size=10),
plot.title = ggplot2::element_text(hjust = 0.5,size=10),
plot.subtitle = ggplot2::element_text(hjust = 0.5,size=10,color = "#EC7607"),
axis.line = ggplot2::element_line(size = 0.3),  # 设置坐标轴线的粗细
axis.ticks = ggplot2::element_line(size = 0.3),  # 设置刻度线的粗细
legend.spacing.x = grid::unit(1.0, 'cm'),
legend.position = "top")+
ggplot2:: scale_fill_gradient2(high = fillcolor_high, low =fillcolor_low ,midpoint=0.5,limits=c(0, 1), breaks = c(0, 0.5, 1),
labels = scales::percent_format(accuracy = 1)
) +
ggplot2::geom_text(ggplot2::aes(label = round(value, 2)*100),size = fontsize);plt_jaccard_indices
#' @importFrom dplyr filter rename
#' @importFrom rlang sym
#' @importFrom ggplot2 ggplot aes geom_tile scale_x_discrete scale_y_discrete
#' @importFrom ggplot2 theme_classic theme labs element_text element_line element_blank
#' @importFrom ggplot2 scale_fill_gradient2 geom_text
#' @importFrom grid unit
#' @importFrom scales percent_format
#'
#' @export
#'
jaccard_indices=function(dt,
intensity.col = "Abundance",
protein.col="Protein",
group.col="BioReplicate",
fillcolor_high="#EC7607",
fillcolor_low="#077DEC",
fontsize=2
){
colsym = rlang::sym(intensity.col)
if(!is.null(intensity.col)){
dt_Jaccard = dt |>
dplyr::filter(!is.na(!!colsym)) |>
dplyr::filter({
val = !!colsym
if (is.numeric(val)) {
!is.nan(val) & val != 0
} else {
val != "" & val != "0"
}
})
}else{
dt_Jaccard = dt
}
Jaccard_set_list=split(dt_Jaccard[[protein.col]], dt_Jaccard[[group.col]])
.calculate_jaccard =function(set1, set2) {
intersection = length(intersect(set1, set2))
union = length(union(set1, set2))
jaccard_index =intersection / union
return(jaccard_index)
}
jaccard_indices= matrix(nrow = length(Jaccard_set_list), ncol = length(Jaccard_set_list))
#计算每一对的 Jaccard 指数
for (i in seq_along(Jaccard_set_list)) {
for (j in seq_along(Jaccard_set_list)) {
jaccard_indices[i, j] = .calculate_jaccard(Jaccard_set_list[[i]], Jaccard_set_list[[j]])
}
}
# 给矩阵加上行名和列名
rownames(jaccard_indices)= colnames(jaccard_indices)= names(Jaccard_set_list)
#提取矩阵的右下角
get_lower_tri = function(mat) {
mat[upper.tri(mat)] = NA
return(mat)
}
#获得右下角矩阵数据
#jaccard_indices_plot = reshape2::melt(get_lower_tri(jaccard_indices), na.rm = TRUE)
jaccard_indices_plot= get_lower_tri(jaccard_indices) |>
as.table() |>
as.data.frame() |>
dplyr::filter(!is.na(Freq)) |>
dplyr::rename(Var1 = Var1, Var2 = Var2, value = Freq)
#定义标签
labz =unique(jaccard_indices_plot$Var1)
jaccard_indices_mean =mean(jaccard_indices_plot$value)
plt_jaccard_indices = ggplot2::ggplot(jaccard_indices_plot,ggplot2:: aes(x=Var1, y=Var2, fill=value)) +
ggplot2::geom_tile(color = "black",size=0.3)+
ggplot2::scale_x_discrete(labels= labz) +
ggplot2::scale_y_discrete(labels= labz, position = "right") + #y轴置于右侧
ggplot2::theme_classic() +
ggplot2::labs(x =NULL,
y = NULL,
fill = "Jaccard Index",
title="Protein Jaccard Index",
subtitle = paste0("Average Jaccard Index:",round(jaccard_indices_mean, 2)*100,"%")) +
ggplot2::theme(axis.text.x = ggplot2::element_text(size = 5,angle = 45,vjust = 1,hjust = 1),
axis.text.y = ggplot2::element_text(size=5),
axis.title.y = ggplot2::element_text(size=5),
axis.title.x = ggplot2::element_text(size=5),
legend.text = ggplot2::element_text(size=10),
legend.title = ggplot2::element_text(size=10),
plot.title = ggplot2::element_text(hjust = 0.5,size=10),
plot.subtitle = ggplot2::element_text(hjust = 0.5,size=10,color = "#EC7607"),
axis.line = ggplot2::element_line(size = 0.3),  # 设置坐标轴线的粗细
axis.ticks = ggplot2::element_line(size = 0.3),  # 设置刻度线的粗细
legend.spacing.x = grid::unit(1.0, 'cm'),
legend.position = "top")+
ggplot2:: scale_fill_gradient2(high = fillcolor_high, low =fillcolor_low ,midpoint=0.5,limits=c(0, 1), breaks = c(0, 0.5, 1),
labels = scales::percent_format(accuracy = 1)
) +
ggplot2::geom_text(ggplot2::aes(label = round(value, 2)*100),size = fontsize);plt_jaccard_indices
return(list(
plot = plt_jaccard_indices,
jaccard_indices = jaccard_indices_plot
))
}
jaccard_indices(dt,
intensity.col = "Abundance",
protein.col="Protein",
group.col="BioReplicate",
fillcolor_high="#EC7607",
fillcolor_low="#077DEC",
fontsize=2)
devtools::document()
devtools::document()
devtools::check()
devtools::install_github("Chuanping-Zhao/ZCPstates")
?heatmap_cor
??heatmap_cor
heatmap_cor
library(ZCPstates)
?boxdensity
pltvenn()
pltvenn
?pltvenn
common_elements = c("a", "b", "c", "d", "e")
group1 = c(common_elements, sample(letters[6:26], 5))
group2 = c(common_elements, sample(letters[6:26], 5))
group3 = c(common_elements, sample(letters[6:26], 5))
dt = data.frame(
id = c(group1, group2, group3),
group = rep(c("group1", "group2", "group3"), each = length(common_elements) + 5)
)
pltvenn(dt, group.by = "group", proteincol.id = "id",type=c("ellipse","circle")[2],fill.alpha = 1)
pltvenn(dt, group.by = "group", proteincol.id = "id",type=c("ellipse","circle")[2],fill.alpha = 0.5)
pltvenn(dt, group.by = "group", proteincol.id = "id",type=c("ellipse","circle")[2],fill.alpha = 0.8)
pltvenn(dt, group.by = "group", proteincol.id = "id",type=c("ellipse","circle")[1],fill.alpha = 0.8)
devtools::install_github("Chuanping-Zhao/ZCPstates")
library(ZCPstates)
ls("package:ZCPstates")
