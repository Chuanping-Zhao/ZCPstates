% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/easypca.R
\name{easypca}
\alias{easypca}
\title{Easy PCA with Grouping and Scaling}
\usage{
easypca(
  df,
  sample.id = "File ID",
  mutigoup.id = c("gender", "age_range"),
  scaling = "pareto",
  procomp.center = TRUE,
  procomp.scale = FALSE,
  pointsize = 1.5
)
}
\arguments{
\item{df}{A data frame containing the input data. It should include a column for sample identifiers,
one or more grouping variable columns, and numeric feature columns for PCA.}

\item{sample.id}{A string specifying the column name in \code{df} that contains the sample identifier for each observation.}

\item{mutigoup.id}{A character vector of column names in \code{df} corresponding to grouping variables.
These variables will be used to label or color points in the PCA plots (e.g., different colors for each group).
If more than one grouping variable is provided, multiple visualizations may be generated.}

\item{scaling}{A string specifying the scaling or transformation method to apply to the numeric data before PCA.
Options are:
\itemize{
\item \code{"pareto"}: Pareto scaling (mean-center each variable and divide by the square root of its standard deviation).
\item \code{"uv"}: Unit variance scaling (mean-center each variable and divide by its standard deviation, i.e., standardize to variance = 1).
\item \code{"logtrans"}: Log transformation of each numeric value (e.g., base-10 logarithm), useful for reducing skewness.
\item \code{"noop"}: No scaling or transformation (use the raw data as is).
}}

\item{procomp.center}{Logical; if \code{TRUE}, center the data (subtract the mean of each variable) before performing PCA.
This is passed to the \code{center} argument of \code{\link[stats:prcomp]{stats::prcomp()}} and is generally recommended unless the data is already centered.}

\item{procomp.scale}{Logical; if \code{TRUE}, scale the data to unit variance (divide by the standard deviation of each variable) before PCA.
This is passed to the \code{scale.} argument of \code{\link[stats:prcomp]{stats::prcomp()}}. Using \code{procomp.center = TRUE} and \code{procomp.scale = TRUE} together is equivalent to standardizing the data.}

\item{pointsize}{Numeric value indicating the size of points in the PCA scatter plot(s).}
}
\value{
A list containing the following components:
\describe{
\item{\code{pca_model}}{The PCA model object returned by \code{\link[stats]{prcomp}}. This includes the rotation (loadings for each principal component), standard deviations of principal components, center and scale used, and the PCA scores (accessible via \code{pca_model$x}).}
\item{\code{pca_data}}{A data frame (or tibble) of PCA-transformed data. Each row corresponds to a sample from the original dataset and contains its principal component scores (e.g., PC1, PC2, ...), along with the original sample ID and grouping variable values for reference.}
\item{\code{plots}}{A named list of \code{\link[ggplot2]{ggplot}} objects for visualizing the PCA results. For example, this may include a scatter plot of PC1 vs PC2 with points colored by one of the grouping variables. If multiple grouping variables are provided in \code{mutigoup.id}, the list may contain a separate PCA plot for each grouping variable (with list names corresponding to the grouping variable names).}
}
}
\description{
Performs a principal component analysis (PCA) on a given data frame with options for data scaling
and multiple grouping variables. This function returns the PCA model, the transformed PCA data with
group annotations, and ggplot2 visualizations for easy interpretation of PCA results.
}
\examples{
#demo

#Load example dataset and prepare data
data(iris)
dt=iris |>  dplyr::mutate(group2 = sample(c("A", "B"), dplyr::n(), replace = TRUE)) |> dplyr::rename(group1=Species) |> dplyr::mutate(sample=paste0(group1,"_",dplyr::row_number()))
dt$group1 <- as.character(dt$group1)
dt$group2 <- as.character(dt$group2)

colnames(dt)[1:4] <- paste0("Feature", 1:4)

#pca
result <- easypca(
df = dt,
sample.id = "sample",
mutigoup.id = c("group1","group2"),
scaling = "uv",
procomp.center = TRUE,
procomp.scale = TRUE,
pointsize = 1.5
)

#Inspect the PCA model and data
print(result$pca_model)    #PCA model details (prcomp output)
head(result$pca_data)      #First few rows of PCA scores with grouping info

#Visualize PCA plots
print(result$plots$group1)        #Print the muti-group PCA analysis
print(result$plots$group2)

}
