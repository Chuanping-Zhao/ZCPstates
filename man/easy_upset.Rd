% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/easy_upset.R
\name{easy_upset}
\alias{easy_upset}
\title{Plot an UpSet Plot for Protein Group Memberships}
\usage{
easy_upset(
  longdata,
  group.by,
  proteincol.id,
  top_n = 10,
  combmatrix_point_color = "#0863A7",
  combmatrix_line_color = "#8FD3BD",
  combmatrix_linesize = 2,
  alpha = 1
)
}
\arguments{
\item{longdata}{A data.frame or data.table in long format, typically with at least one column for protein IDs
and one column representing group membership (e.g., sample or condition names).}

\item{group.by}{A string specifying the column name to use for group membership (e.g., \code{"R.FileName"}).}

\item{proteincol.id}{A string specifying the column name that contains the unique protein or peptide identifiers
(e.g., \code{"PEP.StrippedSequence"}).}

\item{top_n}{Integer. Number of top combinations (intersections) to display in the plot. Default is 10.}

\item{combmatrix_point_color}{Color for the combination matrix points. Default is "#0863A7".}

\item{combmatrix_line_color}{Color for the combination matrix lines. Default is "#8FD3BD".}

\item{combmatrix_linesize}{Numeric. Size (thickness) of the combination matrix lines. Default is 2.}

\item{alpha}{Numeric. Transparency for the bars. Range from 0 to 1. Default is 1 (fully opaque).}
}
\value{
A ggplot2 object representing the UpSet plot.
}
\description{
This function generates an UpSet plot using ggupset and ggplot2 to visualize the distribution of proteins
(e.g., peptide sequences) across different sample groups or conditions.
}
\examples{
# Create demo data
set.seed(123)
demo_data <- data.frame(
  R.FileName = sample(paste0("Sample", 1:5), 100, replace = TRUE),
  PEP.StrippedSequence = sample(paste0("PEP", 1:20), 100, replace = TRUE),
  PG.ProteinAccessions = sample(c("P001", "P002", "P003"), 100, replace = TRUE),
  PG.ProteinDescriptions = sample(c("Kinase", "Transporter", "Ligase"), 100, replace = TRUE),
  PG.ProteinNames = sample(c("KIN1_HUMAN", "TRP1_HUMAN", "LIG1_HUMAN"), 100, replace = TRUE),
  PG.Coverage = paste0(sample(5:30, 100, replace = TRUE), "\%"),
  PG.IsSingleHit = sample(c(TRUE, FALSE), 100, replace = TRUE),
  PG.Qvalue = runif(100),
  PG.Quantity = runif(100, 1e3, 1e5)
)

# Plot using easy_upset
easy_upset(
  longdata = demo_data,
  group.by = "R.FileName",
  proteincol.id = "PEP.StrippedSequence",
  top_n = 8,
  combmatrix_point_color = "#4C72B0",
  combmatrix_line_color = "#55A868",
  alpha = 0.8
)

}
